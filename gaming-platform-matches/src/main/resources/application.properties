# Quarkus
quarkus.http.port = 8084
quarkus.log.level=INFO
quarkus.http.cors=true

# MongoDB
quarkus.mongodb.connection-string = mongodb://192.168.0.241:27017
quarkus.mongodb.database = players

# Messaging
kafka.bootstrap.servers=192.168.0.241:9094

### Listen when someone is searching for a match
mp.messaging.incoming.find-match-in.connector=smallrye-kafka
mp.messaging.incoming.find-match-in.topic=find-match
mp.messaging.incoming.find-match-in.broadcast=true
mp.messaging.incoming.find-match-in.value.deserializer=com.guilhermemussi.matches.config.JsonDeserializer

### When player disconnects, cancel matches they're in
mp.messaging.incoming.player-disconnected-in.connector=smallrye-kafka
mp.messaging.incoming.player-disconnected-in.topic=player-disconnected
mp.messaging.incoming.player-disconnected-in.group.id=on-player-disconnected-matches
mp.messaging.incoming.player-disconnected-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

### Notify that a match should start between players
mp.messaging.outgoing.start-match-out.connector=smallrye-kafka
mp.messaging.outgoing.start-match-out.topic=start-match
mp.messaging.outgoing.start-match-out.broadcast=true
mp.messaging.outgoing.start-match-out.value.serializer=com.guilhermemussi.matches.config.JsonSerializer

### Start a match between players and inform them
mp.messaging.incoming.start-match-in.connector=smallrye-kafka
mp.messaging.incoming.start-match-in.topic=start-match
mp.messaging.incoming.start-match-in.group.id=start-match-matches
mp.messaging.incoming.start-match-in.value.deserializer=com.guilhermemussi.matches.config.JsonDeserializer

### Notify players of events in their matches
mp.messaging.outgoing.player-events-out.connector=smallrye-kafka
mp.messaging.outgoing.player-events-out.topic=player-events
mp.messaging.outgoing.player-events-out.broadcast=true
mp.messaging.outgoing.player-events-out.value.serializer=com.guilhermemussi.matches.config.JsonSerializer