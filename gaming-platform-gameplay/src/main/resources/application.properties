# Quarkus
quarkus.http.port = 8082
quarkus.log.level=INFO
quarkus.http.cors=true

# JWT
quarkus.smallrye-jwt.enabled=false

# MongoDB
quarkus.mongodb.connection-string = mongodb://192.168.0.241:27017
quarkus.mongodb.database = players

# Messaging
kafka.bootstrap.servers=192.168.0.241:9094

### Send player connected events to everyone
mp.messaging.outgoing.player-connected-out.connector=smallrye-kafka
mp.messaging.outgoing.player-connected-out.topic=player-connected
mp.messaging.outgoing.player-connected-out.broadcast=true
mp.messaging.outgoing.player-connected-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer

### Send player disconnected events to everyone
mp.messaging.outgoing.player-disconnected-out.connector=smallrye-kafka
mp.messaging.outgoing.player-disconnected-out.topic=player-disconnected
mp.messaging.outgoing.player-disconnected-out.broadcast=true
mp.messaging.outgoing.player-disconnected-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer

### Send find a match event to the matchmaking service
mp.messaging.outgoing.find-match-out.connector=smallrye-kafka
mp.messaging.outgoing.find-match-out.topic=find-match
mp.messaging.outgoing.find-match-out.broadcast=true
mp.messaging.outgoing.find-match-out.value.serializer=com.guilhermemussi.gameplay.config.JsonSerializer

### When a player is connected, update its status (only one container)
mp.messaging.incoming.player-connected-in.connector=smallrye-kafka
mp.messaging.incoming.player-connected-in.topic=player-connected
mp.messaging.incoming.player-connected-in.group.id=on-player-connected-gameplay
mp.messaging.incoming.player-connected-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

### When a player is disconnected, update its status (only one container)
mp.messaging.incoming.player-disconnected-in.connector=smallrye-kafka
mp.messaging.incoming.player-disconnected-in.topic=player-disconnected
mp.messaging.incoming.player-disconnected-in.group.id=on-player-disconnected-gameplay
mp.messaging.incoming.player-disconnected-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

### Listen for player events and send to the relevant player, all containers must do that
mp.messaging.incoming.player-events-in.connector=smallrye-kafka
mp.messaging.incoming.player-events-in.topic=player-events
mp.messaging.incoming.player-events-in.value.deserializer=com.guilhermemussi.gameplay.config.JsonDeserializer
